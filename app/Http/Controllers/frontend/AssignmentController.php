<?php

namespace App\Http\Controllers\frontend;

use App\models\Assignment;
use App\models\AssignmentFile;
use App\models\AssignmentSubmission;
use App\models\AssignmentSubmissionFile;
use App\models\Course;
use App\models\Student;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;

class AssignmentController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request, $cid)
    {

        $courseid = decrypt($cid);
        $data['courseId'] = $cid;

        if (auth('trainer')->check()) {
            $data['title'] = 'Upload Assignment';
            $course = Course::findOrFail($courseid);
            $data['students'] = $course->students;
            return view('frontend.trainer.assignment.index', $data);
        } else {
            $data['title'] = 'Submit Assignment';
            $courseId = $courseid;
            $student = auth('student')->user();
            $data['assignmentFiles'] = $student->assignments()->where('course_id', $courseId)->where('status', 1)->paginate(30);
            return view('frontend.student.assignment.assignments-list-for-submission', $data);
        }
    }

    public function assignmentSubmissionForm(Request $request)
    {
        $data['title'] = 'Submit Assignment';
        $data['courseId'] = $request->course_id;
        $data['assignmentId'] = $request->assignment_id;
        return view('frontend.student.assignment.assignment-submission-form', $data);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    //upload assignment by trainer and submit assignment by student
    public function store(Request $request)
    {
        if (auth('trainer')->check()) {
            $request->validate([
                'title' => 'required',
                'assignments' => 'required',
                'students' => 'required'
            ]);
            $students = $request->students;
            $courseId = decrypt($request->course_id);
            $assignments = $request->assignments;
            $trainerId = auth('trainer')->user()->id;

            $assignment = Assignment::create([
                'title' => $request->title,
                'description' => $request->description,
                'course_id' => $courseId,
                'trainer_id' => $trainerId
            ]);

            //save all assignment file
            $files = [];
            foreach ($assignments as $key => $a) {
                $files[$key]['assignment_id'] = $assignment->id;
                $fileName = uploadSingleAssignmentFile($a['assignment'], 'assignment-files');
                $files[$key]['fileName'] = $fileName ?? null;
                $files[$key]['created_at'] = now();
            }
            AssignmentFile::insert($files);

            //assign the assignment to students
            $assignment->assignStudents()->attach($students);

        } else {
            //assignment submission by student
            $request->validate([
                'title' => 'required',
                'assignments' => 'required',
            ]);

            $courseId = decrypt($request->course_id);
            $assignments = $request->assignments;
            $studentId = auth('student')->user()->id;
            //assignment id which is generated by trainer
            $assignmentId = decrypt($request->assignment_id);

            //save assignment submission from student for specific course
            $assignmentSubmission = AssignmentSubmission::create([
                'title' => $request->title,
                'description' => $request->description,
                'course_id' => $courseId,
                'student_id' => $studentId,
                'assignment_id' => $assignmentId
            ]);

            //save all assignment file
            $files = [];
            foreach ($assignments as $key => $a) {
                $files[$key]['assignment_submission_id'] = $assignmentSubmission->id;
                $fileName = uploadSingleAssignmentFile($a['assignment'], 'assignment-submission-files');
                $files[$key]['fileName'] = $fileName ?? null;
                $files[$key]['created_at'] = now();
            }
            AssignmentSubmissionFile::insert($files);

            //add student homework to submission list
            $homework = Assignment::findOrFail($assignmentId);
            $homework->studentSubmissionList()->attach($studentId, ['assignment_submission_id' => $assignmentSubmission->id]);
        }

        //success message
        customSuccessMessage('Assignment Uploaded!', 'Success');

        return back();

    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */

    //student list to check assignment
    public function assignmentStudentList(Request $request)
    {
        $data['title'] = 'Student Submission List';
        $courseId = decrypt($request->course_id);
        $assignmentId = decrypt($request->assignment_id);
        $data['assignmentId'] = $assignmentId;
        $data['courseId'] = $courseId;
        $assignment = Assignment::findOrFail($assignmentId);
        $data['students'] = $assignment->studentSubmissionList;

        return view('frontend.trainer.assignment.student-list', $data);
    }

    public function showUploadedAssignmentsByStudent(Request $request)
    {
        $courseId = decrypt($request->course_id);
        $data['courseId'] = $courseId;
        $assignmentId = decrypt($request->assignment_id);
        $data['assignmentId'] = $assignmentId;
        if (auth('trainer')->check()) {
            $studentId = decrypt($request->student_id);
            //get course assignments for specific student
            $assignmentSubmissionFiles = AssignmentSubmission::where('student_id', $studentId)->where('assignment_id', $assignmentId)->with('assignmentsubmissionfiles')->get();
//        dd($assignmentSubmissionFiles);
            $data['assignmentSubmissionFiles'] = $assignmentSubmissionFiles;
            return view('frontend.trainer.assignment.assignment-submission-files', $data);
        } else {
            $studentId = auth('student')->user()->id;
            //get course assignments for specific student
            $assignmentSubmissionFiles = AssignmentSubmission::where('student_id', $studentId)->where('assignment_id', $assignmentId)->with('assignmentsubmissionfiles')->get();
//        dd($assignmentSubmissionFiles);
            $data['assignmentSubmissionFiles'] = $assignmentSubmissionFiles;
            return view('frontend.student.assignment.assignment-submission-files', $data);
        }
    }

    public function showAssignmentList($cid)
    {
        $courseId = decrypt($cid);
        $data['courseId'] = $courseId;
        $studentId = auth('student')->user();
        $assignments = $studentId->assignments()->where('course_id', $courseId)->paginate(30);
        $data['assignmentFiles'] = $assignments;
        return view('frontend.student.assignment.assignments-list-for-viewing-submitted-files', $data);
    }

    public function showUploadedAssignments($cid = null)
    {
        $cid = decrypt($cid);

        if (auth('trainer')->check()) {
            $courseId = $cid;
            $data['courseId'] = $courseId;
            $trainer = auth('trainer')->user();
            $data['assignmentFiles'] = $trainer->assignments()->where('course_id', $courseId)->paginate(30);
            return view('frontend.trainer.assignment.assignments-list', $data);
        } else {
            $courseId = $cid;
            $data['courseId'] = $courseId;
            $studentId = auth('student')->user();
            $assignments = $studentId->assignments()->where('course_id', $courseId)->where('status', 1)->paginate(30);
            $data['assignmentFiles'] = $assignments;
            return view('frontend.student.assignment.uploaded-assignments', $data);
        }
    }

    //show assignment submitted by trainer or student for specific course
    public function showSubmittedAssignments(Request $request, $cid = null)
    {
        $courseId = decrypt($cid);
        $data['courseId'] = $courseId;
        if (auth('trainer')->check()) {
            $trainer = auth('trainer')->user();
            //get course assignments for specific student
            $data['assignmentFiles'] = $trainer->assignments()->with('assignmentFiles')->where('course_id', $courseId)->paginate(30);
            return view('frontend.trainer.assignment.uploaded-assignments', $data);
        } else {
            $student = auth('student')->user();

            //get course assignments for specific student
            $assignmentFiles = AssignmentSubmission::where('student_id', $student->id)->where('course_id', $courseId)->with('assignmentsubmissionfiles')->get();
            $data['assignmentFiles'] = $assignmentFiles;

            return view('frontend.student.assignment.uploaded-assignments', $data);
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function editAssignmentSubmission(Request $request, $id)
    {
        $aid = decrypt($id);
        $data['title'] = 'Assignment Edit';
        $data['courseId'] = $request->course_id;
        $data['assignmentId'] = $request->assignment_id;
        $data['assignmentSubmission'] = AssignmentSubmission::with('assignmentsubmissionFiles')->find($aid);
        return view('frontend.student.assignment.assignment-edit', $data);
    }

    public function updateAssignmentSubmission(Request $request, $id)
    {
        $aid = decrypt($id);
        $assignmentSubmission = AssignmentSubmission::find($aid);
        $assignmentSubmission->title = $request->title;
        $assignmentSubmission->description = $request->description;
        $assignmentSubmission->update();

        //save all assignment file

        if ($request->assignments[0]) {
            $files = [];
            foreach ($request->assignments as $key => $a) {
                $files[$key]['assignment_submission_id'] = $assignmentSubmission->id;
                $fileName = uploadSingleAssignmentFile($a['assignment'], 'assignment-submission-files');
                $files[$key]['fileName'] = $fileName ?? null;
                $files[$key]['created_at'] = now();
            }
            AssignmentSubmissionFile::insert($files);
        }

        UpdateMessage('Assignment Submission');
        return back();
    }

    public function deleteAssignmentSubmissionFile($id)
    {
        $aid = decrypt($id);
        $assignmentSubmissionFile = AssignmentSubmissionFile::find($id);
        //delete single image if exist
        removeSingleAssignmentFile($assignmentSubmissionFile->filename, 'assignment-files');
        $assignmentSubmissionFile->delete();

        DeleteMessage('File');
        return back();
    }

    public function deleteAssignmentSubmission($id)
    {
        $aid = decrypt($id);
        $assignmentSubmission = AssignmentSubmission::with('assignmentsubmissionFiles')->find($aid);
        //remove assignment submission files
        foreach ($assignmentSubmission->assignmentsubmissionFiles as $assignmentSubmissionFile) {
            //delete single image if exist
            removeSingleAssignmentFile($assignmentSubmissionFile->filename, 'assignment-submission-files');
        }

        //remove assignment submission (other assignment submission files and assignment of student will be automatically removed from database)
        $assignmentSubmission->delete();

        DeleteMessage('Assignment Submission');
        return back();
    }

    public function editAssignment(Request $request, $id)
    {
        $aid = decrypt($id);

        $data['title'] = 'Assignment Edit';
        $data['courseId'] = $request->course_id;
        $data['assignment'] = Assignment::with('assignmentFiles')->find($aid);

        return view('frontend.trainer.assignment.assignment-edit', $data);
    }

    public function updateAssignment(Request $request, $id)
    {
        $aid = decrypt($id);
        $assignment = Assignment::find($aid);
        $assignment->title = $request->title;
        $assignment->description = $request->description;
        $assignment->update();

        //save all assignment file

        if ($request->assignments[0]) {
            $files = [];
            foreach ($request->assignments as $key => $a) {
                $files[$key]['assignment_id'] = $assignment->id;
                $fileName = uploadSingleAssignmentFile($a['assignment'], 'assignment-files');
                $files[$key]['fileName'] = $fileName ?? null;
                $files[$key]['created_at'] = now();
            }
            AssignmentFile::insert($files);
        }

        UpdateMessage('Assignment');
        return back();
    }

    public function deleteAssignmentFile($id)
    {
        $aid = decrypt($id);
        $assignmentFile = AssignmentFile::find($aid);
        //delete single image if exist
        removeSingleAssignmentFile($assignmentFile->filename, 'assignment-files');
        $assignmentFile->delete();

        DeleteMessage('File');
        return back();
    }

    public function deleteAssignment($id)
    {
        $aid = decrypt($id);
        $assignment = Assignment::with('assignmentFiles')->find($aid);

        //remove assignment submission files
        foreach ($assignment->assignmentFiles as $assignmentFile) {
            //delete single image if exist
            removeSingleAssignmentFile($assignmentFile->filename, 'assignment-files');
        }

        //remove assignment (other assignment files and assignment assigned to student will be automatically removed from database)
        $assignment->delete();

        DeleteMessage('Assignment Submission');
        return back();
    }

    public function disableAssignment($assignmentId)
    {
        $aId = decrypt($assignmentId);
        $assignment = Assignment::find($aId);
        $assignment->status = $assignment->status ? 0 : 1;
        $assignment->save();
        return back();
    }
}
